<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Datastructures and Algorithms on Polymath.cloud</title>
    <link>https://polymath.cloud/tags/datastructures-and-algorithms/</link>
    <description>Recent content in Datastructures and Algorithms on Polymath.cloud</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Nov 2020 21:21:14 +0000</lastBuildDate>
    
	<atom:link href="https://polymath.cloud/tags/datastructures-and-algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learn Functional Python in 10 Minutes</title>
      <link>https://polymath.cloud/functional/</link>
      <pubDate>Mon, 30 Nov 2020 21:21:14 +0000</pubDate>
      
      <guid>https://polymath.cloud/functional/</guid>
      <description>In this short 10 minute article, you‚Äôll learn what the functional paradigm is in Python. You‚Äôll also learn about list comprehensions.
üìå Functional Paradigm In an imperative paradigm, we do things by giving the computer a sequence of tasks and then it executes them. While executing them, it can change states. For example, let‚Äôs say we set A = 5, then we change the value of A. We have variables in the sense that the value inside the variable varies.</description>
    </item>
    
    <item>
      <title>Algorithmic Design Paradigms</title>
      <link>https://polymath.cloud/algorithms/</link>
      <pubDate>Sun, 01 Nov 2020 23:46:37 +0000</pubDate>
      
      <guid>https://polymath.cloud/algorithms/</guid>
      <description>Greedy Algorithms Greedy algorithms aim to make the optimal choice at that given moment. Each step it chooses the optimal choice, without knowing the future. It attempts to find the globally optimal way to solve the entire problem using this method.
Why Are Greedy Algorithms Called Greedy? Algorithms are called greedy when they utilise the greedy property. The greedy property is:
 At that exact moment in time, what is the optimal choice to make?</description>
    </item>
    
    <item>
      <title>All You Need to Know About Big O Notation [Python Examples]</title>
      <link>https://polymath.cloud/big-o-notation/</link>
      <pubDate>Thu, 08 Oct 2020 16:43:37 +0000</pubDate>
      
      <guid>https://polymath.cloud/big-o-notation/</guid>
      <description>By the end of this article, you&amp;rsquo;ll thoroughly understand Big O notation. You&amp;rsquo;ll also know how to use it in the real world, and even the mathematics behind it!
In computer science, time complexity is the computational complexity that describes the amount of time it takes to run an algorithm.
Big O notation is a method for determining how fast an algorithm is. Using Big O notation, we can learn whether our algorithm is fast or slow.</description>
    </item>
    
    <item>
      <title>How Does Tor Really Work? The Definitive Visual Guide (2020)</title>
      <link>https://polymath.cloud/how-does-tor-really-work/</link>
      <pubDate>Sat, 19 Sep 2020 11:53:11 +0000</pubDate>
      
      <guid>https://polymath.cloud/how-does-tor-really-work/</guid>
      <description>Today, we&amp;rsquo;re going to do a technical deep-dive into how Tor really works.
No mention of how to access Tor, no mention of what might be on Tor. This is how Tor works.
Without speculation and without exaggeration of what Tor is. Just a deep-dive into the technical stuff of how Tor works.
This article is designed to be read by anyone, with **ZERO **knowledge on networking or Tor.
Let&amp;rsquo;s dive right in.</description>
    </item>
    
    <item>
      <title>Learn Functional Python in 10 Minutes</title>
      <link>https://polymath.cloud/learn-functional-python-in-10-minutes/</link>
      <pubDate>Wed, 20 Nov 2019 22:55:19 +0000</pubDate>
      
      <guid>https://polymath.cloud/learn-functional-python-in-10-minutes/</guid>
      <description>In this short 10 minute article, you‚Äôll learn what the functional paradigm is in Python. You‚Äôll also learn about list comprehensions.
Table of Contents  Table of Contents  At least this isn&amp;rsquo;t a pop up! üòÖ   üìå Functional Paradigm üåç How Does Python&amp;rsquo;s Map Work? üîë Lambda Expressions in Python üîπ Reduce Function in Python üç≥ Filter ‚òÅ Higher Order Functions in Python üé∂ Partial Application with Functions üêç Functional Programming Isn‚Äôt Pythonic üéì List Comprehensions ü§î Comprehensions of Any Iterable üëã Conclusion   At least this isn&amp;rsquo;t a pop up!</description>
    </item>
    
    <item>
      <title>Divide and Conquer Algorithms with Python Examples</title>
      <link>https://polymath.cloud/divide-and-conquer-algorithms/</link>
      <pubDate>Wed, 20 Nov 2019 16:28:45 +0000</pubDate>
      
      <guid>https://polymath.cloud/divide-and-conquer-algorithms/</guid>
      <description>Often I&amp;rsquo;ll hear about how you can optimise a for loop to be faster or how switch statements are faster than if statements. Most computers have over 1 core, with the ability to support multiple threads. Before worrying about optimising for loops or if statements try to attack your problem from a different angle.
Divide and Conquer is one way to attack a problem from a different angle. Don&amp;rsquo;t worry if you have **zero **experience or knowledge on the topic.</description>
    </item>
    
    <item>
      <title>How Does BitTorrent Work? a Plain English Guide</title>
      <link>https://polymath.cloud/bit-torrent/</link>
      <pubDate>Wed, 20 Nov 2019 13:02:50 +0000</pubDate>
      
      <guid>https://polymath.cloud/bit-torrent/</guid>
      <description>No talk about downloading things on BitTorrent. Or the best clients to do so.
Just a deep-dive into the technical side of it.
Anyone can read this article. Requires ZERO knowledge on networking or BitTorrent to read this.
BitTorrent is one of the most common protocols for transferring large files. In February 2013, BitTorrent was responsible for 3.35% of all worldwide bandwidth, more than half of the 6% of total bandwidth dedicated to file sharing.</description>
    </item>
    
    <item>
      <title>Public Key Cryptography Simply Explained</title>
      <link>https://polymath.cloud/how-does-public-key-cryptography-work/</link>
      <pubDate>Tue, 19 Nov 2019 01:47:08 +0000</pubDate>
      
      <guid>https://polymath.cloud/how-does-public-key-cryptography-work/</guid>
      <description>Public key cryptography seems magical to everyone, even those who understand it. In this post, I&amp;rsquo;m going to explain public key cryptography. Public Key Cryptography is based on asymmetric cryptography, so first let us talk about symmetric cryptography.
 Symmetric Cryptography Your front door is usually locked by a key. This key unlocks &amp;amp; locks your front door. With symmetric cryptography, you have one key which you use to unlock and lock things.</description>
    </item>
    
    <item>
      <title>How to Share a Secret (Diffie-Hellman-Merkle)</title>
      <link>https://polymath.cloud/diffie-hellman-merkle/</link>
      <pubDate>Tue, 19 Nov 2019 01:46:20 +0000</pubDate>
      
      <guid>https://polymath.cloud/diffie-hellman-merkle/</guid>
      <description>Diffie-Hellman-Merkle is a way to share a secret key with someone (or something) without actually sending them the key. Before we look into how we share keys let&amp;rsquo;s first look into what keys are and why we would want to invent a method to share keys without giving the other person the key.
 Your front door is usually locked by a key. This key unlocks &amp;amp; locks your front door.</description>
    </item>
    
    <item>
      <title>What Is Dynamic Programming With Python Examples</title>
      <link>https://polymath.cloud/dynamic-programming/</link>
      <pubDate>Tue, 19 Nov 2019 01:44:21 +0000</pubDate>
      
      <guid>https://polymath.cloud/dynamic-programming/</guid>
      <description>Dynamic programming is breaking down a problem into smaller sub-problems, solving each sub-problem and storing the solutions to each of these sub-problems in an array (or similar data structure) so each sub-problem is only calculated once.
It is both a mathematical optimisation method and a computer programming method.
Optimisation problems seek the maximum or minimum solution. The general rule is that if you encounter a problem where the initial algorithm is solved in O(2n) time, it is better solved using Dynamic Programming.</description>
    </item>
    
    <item>
      <title>Greedy Algorithms In Python</title>
      <link>https://polymath.cloud/greedy-algorithms/</link>
      <pubDate>Tue, 19 Nov 2019 00:58:00 +0000</pubDate>
      
      <guid>https://polymath.cloud/greedy-algorithms/</guid>
      <description>Greedy algorithms aim to make the optimal choice at that given moment. Each step it chooses the optimal choice, without knowing the future. It attempts to find the globally optimal way to solve the entire problem using this method.
Table of Contents  Table of Contents  At least this isn&amp;rsquo;t a full screen pop up! üòÖ Why Are Greedy Algorithms Called Greedy? What Are Greedy Algorithms Used For? How Do I Create a Greedy Algorithm?</description>
    </item>
    
    <item>
      <title>An Algorithm for Finding Anagrams</title>
      <link>https://polymath.cloud/an-algorithm-for-finding-anagrams/</link>
      <pubDate>Mon, 08 Apr 2019 00:28:23 +0000</pubDate>
      
      <guid>https://polymath.cloud/an-algorithm-for-finding-anagrams/</guid>
      <description>Finding anagrams of words does not look like a difficult problem but has an interesting solution.
An anagram is a word or sentence that can be transformed into another word or sentence. Elvis has all the same letters as Lives, so Elvis is an anagram of Lives. The way most people would immediately solve this problem would be to take a word, go through every word in the dictionary and see if the combinations of letters match exactly.</description>
    </item>
    
    <item>
      <title>AVL Trees - Trees that can keep balanced by rotating</title>
      <link>https://polymath.cloud/avl/</link>
      <pubDate>Sun, 07 Apr 2019 11:30:38 +0000</pubDate>
      
      <guid>https://polymath.cloud/avl/</guid>
      <description>An AVL tree (named after inventors Adelson-Velsky and Landis) is a self-balancing binary search tree.
Before we delve into AVL trees, we need to learn a few things.
 Height of a tree The height of a tree is the length of the longest path from the root node (the top node) to some node. In the image above, the tree has a height of 3.
This tree is called balanced.</description>
    </item>
    
  </channel>
</rss>